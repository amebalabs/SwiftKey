name: Build and Release
on:
  push:
    branches-ignore:
      - main
    tags:
      - "v*.*.*"
      - "v*.*.*-beta.*"
  pull_request:
    branches:
      - main

env:
  XCODE_VERSION: "16.1.0"
  BUNDLE_ID: "com.ameba.SwiftKey"
  APP_NAME: "SwiftKey"
  BETA_FEED_URL: "https://amebalabs.github.io/swiftkey/appcast_beta.xml"
  PROD_FEED_URL: "https://amebalabs.github.io/swiftkey/appcast.xml"

jobs:
  verify-release-notes:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    outputs:
      release_notes: ${{ steps.read_notes.outputs.content }}
    steps:
      - uses: actions/checkout@v3
      - name: Get version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      - name: Check release notes exist
        id: check_notes
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          NOTES_PATH="docs/release-notes/${VERSION}.md"
          if [ ! -f "$NOTES_PATH" ]; then
            echo "Error: Release notes not found for version ${VERSION}"
            echo "Expected path: ${NOTES_PATH}"
            exit 1
          fi
      - name: Read release notes
        id: read_notes
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          NOTES_PATH="docs/release-notes/${VERSION}.md"
          CONTENT=$(cat "$NOTES_PATH" | perl -p -e 's/%/%25/g' | perl -p -e 's/\n/%0A/g' | perl -p -e 's/\r/%0D/g')
          echo "content=$CONTENT" >> $GITHUB_OUTPUT

  build:
    runs-on: macos-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Build Application
        run: |
          xcodebuild -scheme "${{ env.APP_NAME }}" \
            -configuration Release \
            -derivedDataPath build \
            -arch arm64 -arch x86_64 \
            ONLY_ACTIVE_ARCH=NO \
            BUILD_NUMBER="${{ github.run_number }}"

      - name: Sign and Notarize
        uses: toitlang/action-macos-sign-notarize@v1.2.0
        with:
          certificate: ${{ secrets.CERTIFICATES_P12 }}
          certificate-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}
          username: ${{ secrets.APPLE_ID }}
          password: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          apple-team-id: ${{ secrets.TEAM_ID }}
          app-path: "build/Build/Products/Release/${{ env.APP_NAME }}.app"
          entitlements-path: "SwiftKeyResources/SwiftKey.entitlements"

      - name: Verify Universal Binary
        run: |
          echo "Checking binary architectures..."
          lipo -archs "build/Build/Products/Release/${{ env.APP_NAME }}.app/Contents/MacOS/${{ env.APP_NAME }}"

      - name: Upload Build Artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-Build
          path: build/Build/Products/Release/${{ env.APP_NAME }}.app
          retention-days: 5
          compression-level: 0

  release:
    needs: [build, verify-release-notes]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set version variables
        run: |
          echo "VERSION=$(echo ${{ github.ref_name }} | sed 's/v//')" >> $GITHUB_ENV
          echo "IS_BETA=$(echo ${{ github.ref_name }} | grep -q 'beta' && echo 'true' || echo 'false')" >> $GITHUB_ENV

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-Build
          path: artifact

      - name: Create ZIP Archive
        run: |
          cd artifact
          zip -r "../${{ env.APP_NAME }}-${{ env.VERSION }}.zip" "${{ env.APP_NAME }}.app"
          cd ..

      - name: Calculate SHA256
        run: |
          echo "ZIP_SHA=$(shasum -a 256 ${{ env.APP_NAME }}-${{ env.VERSION }}.zip | cut -d' ' -f1)" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.APP_NAME }}-${{ env.VERSION }}.zip
          body_path: release_notes.md
          prerelease: ${{ env.IS_BETA == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          keep_files: true

  notify:
    needs: [build]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Notify Status
        run: |
          echo "Build status: ${{ job.status }}"
