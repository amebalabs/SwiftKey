name: Build and Release
on:
  push:
    branches-ignore:
      - main # Ignore main branch when tag is pushed
    tags:
      - "v*.*.*" # Production releases: v1.0.0
      - "v*.*.*-beta.*" # Beta releases: v1.0.0-beta.1
  pull_request:
    branches:
      - main

env:
  XCODE_VERSION: "16.1.0"
  DEVELOPER_ID: "Developer ID Application: Ameba Labs, LLC (X93LWC49WV)"
  TEAM_ID: ${{ secrets.TEAM_ID }}
  BUNDLE_ID: "com.ameba.SwiftKey"
  APP_NAME: "SwiftKey"
  BETA_FEED_URL: "https://amebalabs.github.io/swiftkey/appcast_beta.xml"
  PROD_FEED_URL: "https://amebalabs.github.io/swiftkey/appcast.xml"

jobs:
  verify-release-notes:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    outputs:
      release_notes: ${{ steps.read_notes.outputs.content }}
    steps:
      - uses: actions/checkout@v3
      - name: Get version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      - name: Check release notes exist
        id: check_notes
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          NOTES_PATH="docs/release-notes/${VERSION}.md"
          if [ ! -f "$NOTES_PATH" ]; then
            echo "Error: Release notes not found for version ${VERSION}"
            echo "Expected path: ${NOTES_PATH}"
            exit 1
          fi
      - name: Read release notes
        id: read_notes
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          NOTES_PATH="docs/release-notes/${VERSION}.md"
          CONTENT=$(cat "$NOTES_PATH" | perl -p -e 's/%/%25/g' | perl -p -e 's/\n/%0A/g' | perl -p -e 's/\r/%0D/g')
          echo "content=$CONTENT" >> $GITHUB_OUTPUT

  build:
    runs-on: macos-latest
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Import Certificates
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
          p12-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}

      - name: Build Application
        run: |
          xcodebuild -scheme "${{ env.APP_NAME }}" \
            -configuration Release \
            -derivedDataPath build \
            -arch arm64 -arch x86_64 \
            ONLY_ACTIVE_ARCH=NO \
            BUILD_NUMBER="${{ github.run_number }}" \
            CODE_SIGN_STYLE="Manual" \
            CODE_SIGN_IDENTITY="${{ env.DEVELOPER_ID }}" \
            DEVELOPMENT_TEAM="${{ env.TEAM_ID }}" \
            CODE_SIGNING_REQUIRED=YES \
            CODE_SIGNING_ALLOWED=YES

      - name: Verify Universal Binary
        run: |
          echo "Checking binary architectures..."
          lipo -archs "build/Build/Products/Release/${{ env.APP_NAME }}.app/Contents/MacOS/${{ env.APP_NAME }}"

      - name: Verify Signature
        run: |
          codesign --verify --deep --strict "build/Build/Products/Release/${{ env.APP_NAME }}.app"
          spctl --assess --type exec "build/Build/Products/Release/${{ env.APP_NAME }}.app"

      - name: Upload Build Artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-Build
          path: build/Build/Products/Release/${{ env.APP_NAME }}.app
          retention-days: 5
          compression-level: 0

  release:
    needs: [build, verify-release-notes]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: macos-latest
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-Build
          path: artifact

      - name: Prepare for Signing
        run: |
          mkdir -p build/Build/Products/Release/
          mv artifact/${{ env.APP_NAME }}.app build/Build/Products/Release/

      - name: Import Certificates
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
          p12-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}

      - name: Install Dependencies
        run: |
          brew install create-dmg
          brew install xmlstarlet

      - name: Set version variables
        run: |
          echo "VERSION=$(echo ${{ github.ref_name }} | sed 's/v//')" >> $GITHUB_ENV
          echo "IS_BETA=$(echo ${{ github.ref_name }} | grep -q 'beta' && echo 'true' || echo 'false')" >> $GITHUB_ENV

      - name: Sign Application
        run: |
          codesign --force --sign "${{ env.DEVELOPER_ID }}" \
            --options runtime \
            --entitlements "path/to/your/entitlements.plist" \
            --deep \
            "build/Build/Products/Release/${{ env.APP_NAME }}.app"

      - name: Verify Signature
        run: |
          codesign --verify --deep --strict "build/Build/Products/Release/${{ env.APP_NAME }}.app"
          spctl --assess --type exec "build/Build/Products/Release/${{ env.APP_NAME }}.app"

      - name: Create DMG
        run: |
          APP_PATH="build/Build/Products/Release/${{ env.APP_NAME }}.app"
          DMG_PATH="${{ env.APP_NAME }}-${{ env.VERSION }}.dmg"
          create-dmg \
            --volname "${{ env.APP_NAME }}" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "${{ env.APP_NAME }}.app" 200 190 \
            --hide-extension "${{ env.APP_NAME }}.app" \
            --app-drop-link 600 185 \
            "${DMG_PATH}" \
            "${APP_PATH}"

      - name: Notarize DMG
        run: |
          xcrun notarytool submit "${{ env.APP_NAME }}-${{ env.VERSION }}.dmg" \
            --apple-id "${{ secrets.APPLE_ID }}" \
            --password "${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}" \
            --team-id "${{ env.TEAM_ID }}" \
            --wait

      - name: Generate release notes
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          NOTES_PATH="docs/release-notes/${VERSION}.md"
          cp "$NOTES_PATH" release_notes.md

      - name: Calculate SHA256
        run: |
          echo "DMG_SHA=$(shasum -a 256 ${{ env.APP_NAME }}-${{ env.VERSION }}.dmg | cut -d' ' -f1)" >> $GITHUB_ENV

      - name: Update Appcast
        run: |
          APPCAST_FILE="${{ env.IS_BETA == 'true' && 'docs/appcast_beta.xml' || 'docs/appcast.xml' }}"
          FEED_URL="${{ env.IS_BETA == 'true' && env.BETA_FEED_URL || env.PROD_FEED_URL }}"

          cat > entry.xml << EOF
          <item>
            <title>${{ env.APP_NAME }} ${{ env.VERSION }}</title>
            <pubDate>$(date -R)</pubDate>
            <sparkle:version>${{ env.VERSION }}</sparkle:version>
            <sparkle:shortVersionString>${{ env.VERSION }}</sparkle:shortVersionString>
            <sparkle:minimumSystemVersion>12.0</sparkle:minimumSystemVersion>
            <enclosure
              url="https://github.com/${{ github.repository }}/releases/download/v${{ env.VERSION }}/${{ env.APP_NAME }}-${{ env.VERSION }}.dmg"
              sparkle:version="${{ env.VERSION }}"
              sparkle:shortVersionString="${{ env.VERSION }}"
              length="$(stat -f%z ${{ env.APP_NAME }}-${{ env.VERSION }}.dmg)"
              type="application/octet-stream"
              sparkle:edSignature="${{ env.DMG_SHA }}"
            />
            <description><![CDATA[$(cat release_notes.md)]]></description>
          </item>
          EOF

          if [ ! -f "$APPCAST_FILE" ]; then
            cat > "$APPCAST_FILE" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <rss version="2.0" xmlns:sparkle="http://www.andymatuschak.org/xml-namespaces/sparkle" xmlns:dc="http://purl.org/dc/elements/1.1/">
            <channel>
              <title>${{ env.APP_NAME }} Updates</title>
              <link>${FEED_URL}</link>
              <description>Most recent changes with links to updates.</description>
              <language>en</language>
            </channel>
          </rss>
          EOF
          fi

          xmlstarlet ed --inplace \
            -s "/rss/channel" -t elem -n "item_temp" -v "" \
            --var item_temp '$prev' \
            -m '$item_temp' -v "$(cat entry.xml)" \
            "$APPCAST_FILE"

      - name: Update CHANGELOG
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          NOTES_PATH="docs/release-notes/${VERSION}.md"
          TEMP_FILE=$(mktemp)
          echo "# ${VERSION} ($(date +'%Y-%m-%d'))" > "$TEMP_FILE"
          echo "" >> "$TEMP_FILE"
          cat "$NOTES_PATH" >> "$TEMP_FILE"
          echo "" >> "$TEMP_FILE"
          echo "" >> "$TEMP_FILE"
          if [ -f "CHANGELOG.md" ]; then
            cat "CHANGELOG.md" >> "$TEMP_FILE"
          fi
          mv "$TEMP_FILE" "CHANGELOG.md"

      - name: Commit CHANGELOG
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add CHANGELOG.md
          git commit -m "docs: update CHANGELOG for ${GITHUB_REF#refs/tags/}"
          git push origin HEAD:main

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.APP_NAME }}-${{ env.VERSION }}.dmg
          body_path: release_notes.md
          prerelease: ${{ env.IS_BETA == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          keep_files: true

  notify:
    needs: [build]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Notify Success
        if: success()
        run: |
          echo "Build succeeded!"
      - name: Notify Failure
        if: failure()
        run: |
          echo "Build failed!"
