name: "Codesign and Notarize"
description: "A GitHub Action to codesign and notarize macOS applications."

inputs:
  certificate:
    description: "The certificate for signing."
    required: true
  certificate-password:
    description: "The password for the certificate."
    required: true
  username:
    description: "The Apple ID username to use for notarization."
    required: true
  password:
    description: "The Apple ID password to use for notarization."
    required: true
  apple-team-id:
    description: "The Apple Team ID to use for signing and notarization."
    required: true
  app-path:
    description: "The paths to the application to sign and notarize. One on each line."
    required: true
  entitlements-path:
    description: "The path to the entitlements file to use for signing."
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: Check that we are on macOS
      if: ${{ runner.os != 'macos' }}
      shell: bash
      run: |
        echo "This action only works on macOS."
        exit 1

    - name: Check that all inputs are given and non-empty
      shell: bash
      run: |
        set -e
        if [[ -z "${{ inputs.certificate }}" ]]; then
          echo "Input certificate is missing."
          exit 1
        fi
        if [[ -z "${{ inputs.certificate-password }}" ]]; then
          echo "Input certificate-password is missing."
          exit 1
        fi
        if [[ -z "${{ inputs.username }}" ]]; then
          echo "Input username is missing."
          exit 1
        fi
        if [[ -z "${{ inputs.password }}" ]]; then
          echo "Input password is missing."
          exit 1
        fi
        if [[ -z "${{ inputs.apple-team-id }}" ]]; then
          echo "Input apple-team-id is missing."
          exit 1
        fi
        if [[ -z "${{ inputs.app-path }}" ]]; then
          echo "Input app-path is missing."
          exit 1
        fi

    - name: Install dependencies
      shell: bash
      run: |
        brew install zip

    - name: Import signing keychain
      uses: apple-actions/import-codesign-certs@v3
      with:
        keychain: signing_temp
        p12-file-base64: ${{ inputs.certificate }}
        p12-password: ${{ inputs.certificate-password }}

    - name: Set Entitlements Argument Env Var
      if: ${{ inputs.entitlements-path != '' }}
      shell: bash
      run: |
        echo "entitlements_arg=--entitlements \"${{ inputs.entitlements-path }}\"" >> $GITHUB_ENV

    - name: Code sign
      shell: bash
      run: |
        echo "Debug: Searching for identity in keychain..."
        security find-identity -v signing_temp.keychain
        echo "Debug: Searching for specific Team ID: ${{ inputs.apple-team-id }}"
        security find-identity -v signing_temp.keychain | grep "${{ inputs.apple-team-id }}" | grep "Developer ID Application"

        echo "Debug: Processing app paths..."
        PATHS=$(cat << APP-PATH-DELIMITER-95654260
        ${{ inputs.app-path }}
        APP-PATH-DELIMITER-95654260
        )

        echo "Debug: Starting codesign process..."
        echo "$PATHS" | tr '\n' '\0' | xargs -0 -r -I{} sh -c '
          echo "Signing: {}"
          codesign --keychain signing_temp.keychain --force --deep --sign "${{ inputs.apple-team-id }}" ${{ env.entitlements_arg }} --options=runtime --verbose "{}"
          echo "Verification after signing:"
          codesign -vvv --deep --strict "{}"
        '

    - name: Create a ZIP
      id: zip
      shell: bash
      run: |
        echo "Debug: Creating ZIP at ${{ steps.tmp.outputs.path }}"
        TMP=${{ steps.tmp.outputs.path }}
        ZIP_PATH="$TMP/app.zip"
        PATHS=$(cat << APP-PATH-DELIMITER-95654260
        ${{ inputs.app-path }}
        APP-PATH-DELIMITER-95654260
        )
        echo "Debug: Files to be zipped:"
        echo "$PATHS"
        echo "$PATHS" | tr '\n' '\0' | xargs -0 -r \
          zip -v "$ZIP_PATH"
        echo "Debug: ZIP file created at: $ZIP_PATH"
        echo "Debug: ZIP contents:"
        unzip -l "$ZIP_PATH"
        echo "zip_path=$ZIP_PATH" >> $GITHUB_OUTPUT

    - name: Notarize
      shell: bash
      run: |
        TMP=${{ steps.tmp.outputs.path }}
        echo "Debug: Starting notarization process..."
        echo "Debug: Using Apple ID: ${{ inputs.username }}"
        echo "Debug: Team ID: ${{ inputs.apple-team-id }}"
        echo "Debug: ZIP file path: ${{ steps.zip.outputs.zip_path }}"

        # Check if file exists and is readable
        if [ ! -f "${{ steps.zip.outputs.zip_path }}" ]; then
          echo "Error: ZIP file not found!"
          exit 1
        fi

        echo "Debug: File size: $(ls -lh "${{ steps.zip.outputs.zip_path }}")"

        # Attempt notarization with detailed output
        NOTARY_OUTPUT=$(xcrun notarytool submit \
            "${{ steps.zip.outputs.zip_path }}" \
            --wait \
            --apple-id "${{ inputs.username }}" \
            --password "${{ inputs.password }}" \
            --team-id "${{ inputs.apple-team-id }}" \
            --output-format json 2>&1)

        echo "Debug: Notarization output:"
        echo "$NOTARY_OUTPUT" | tee "$TMP/out.json"

        # Check for specific error patterns
        if echo "$NOTARY_OUTPUT" | grep -q "Authentication error"; then
          echo "Error: Authentication failed. Please check credentials."
          exit 1
        fi

        if ! grep -q "Accepted" "$TMP/out.json"; then
          echo "Error: Notarization failed. Full response:"
          cat "$TMP/out.json"
          exit 1
        fi

    - name: Check notarization
      shell: bash
      run: |
        echo "Debug: Verifying notarization status..."
        PATHS=$(cat << APP-PATH-DELIMITER-95654260
        ${{ inputs.app-path }}
        APP-PATH-DELIMITER-95654260
        )
        echo "$PATHS" | tr '\n' '\0' | xargs -0 -r sh -c '
          echo "Debug: Checking notarization for: {}"
          codesign -vvvv -R="notarized" --check-notarization "{}" || {
            echo "Error: Notarization verification failed for: {}"
            exit 1
          }
        '

    - name: Cleanup keychain
      if: always() # Always run this step to ensure the keychain is properly disposed of.
      shell: bash
      run: |
        # Don't fail if the keychain doesn't exist.
        security delete-keychain signing_temp.keychain || true
